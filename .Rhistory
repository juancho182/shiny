binom.test(60,100)$conf
binom.test(60,100)$conf.int
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf'
s
poisson.test(5,94.32)$conf
ppois(5)
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
range(g2)
difference <- g2-g1
mean(difference)
s <-sd(difference)
s <-sd(difference)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
t.test(difference)$conf.int
sp <- 7*15.34^2 + 20*18.23^2
ns
x
ns <- n - 2
skip
skip()
sp/ns
sp <- sqrt(sp/ns)
sp <- sqrt(sp/ns)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
18
sp <- sqrt((9*var(g1)+9*var(g2))/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
21
num <- (15.34^2/8 + 18.23^2/21)^2
num <- (15.34^2/8 + 18.23^2/21)^2
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
num/den
mydf <- num/den
mydf <- num/den
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
skip()
1
2/1
3
(32-30)/(10/4)
1
15
5
qt(.95,15)
fs
dim(fs)
2
t.test(fs$sheight-fs$fheight)
h
x
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
mybin
mybin[7]=.144
skip()
q
pt(2.5, 15, lower.tail=FALSE)
qnorm(.95)
qnorm(.99)
qnorm(.99)
pnorm(2)
pnorm(2)
pnorm(2,lower.tail=FALSE)
pnorm(2,lower.tail=FALSE)
mybin
mybin
pbinom(6,size=8,prob=.5,lower.tail=FALSE)
2
pbinom(7,size=8,prob=.5,lower.tail=TRUE)
9
ppois(9,5,lower.tail=FALSE)
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth)
data(ToothGrowth)
tapply(ToothGrowth$len,ToothGrowth$supp, sd)
ggplot(ToothGrowth, aes(x=factor(dose),y=len,fill=factor(dose))) +
geom_boxplot(notch=F) + facet_grid(.~supp) +
scale_x_discrete("Dosage") +
scale_y_continuous("Teeth Growth") +
ggtitle("Guinea Pigs theeth growth by OJ and VC")
library(ggplot2)
ggplot(ToothGrowth, aes(x=factor(dose),y=len,fill=factor(dose))) +
geom_boxplot(notch=F) + facet_grid(.~supp) +
scale_x_discrete("Dosage") +
scale_y_continuous("Teeth Growth") +
ggtitle("Guinea Pigs theeth growth by OJ and VC")
t.test(len~supp, paired=F, var.equal=T, data=tdata)
t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
t.test(len~supp, paired=False, var.equal=T, data=ToothGrowth)
t.test(len~supp, paired=F, var.equal=True, data=ToothGrowth)
swirl()
library(swirl)
swirl()
x
myPlot(34)
myplot(34)
x
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
z <- qnorm(.95)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail=FALSE)
x
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
head(pValues)
sum(pValues < 0.05)
sum(pValues < 0.05)
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
tail(trueStatus)
table(pValues2 < 0.05, trueStatus)
2
24/500
24/500
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
4
sum(1:6)/6
g2
print(g2)
print(g2)
head(sh)
nh
x
median(resampledMedians)
median(resampledMedians)
median(sh)
x
sam <- sample(fh,nh*B,replace=TRUE)
sam <- sample(fh,nh*B,replace=TRUE)
resam <- matrix(sam,B,nh)
resam <- matrix(sam,B,nh)
meds <- apply(resam,1,median)
meds <- apply(resam,1,median)
median(meds)-median(fh)
median(meds)-median(fh)
sd(meds)
sd(meds)
sd(resampledMedians)
sd(resampledMedians)
quantile(resampledMedians,c(.025,.975))
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
dim(InsectSprays)
names(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Bdata$count)
range(Cdata$count)
range(Cdata$count)
BCcounts
BCcounts
group
group
testStat
testStat
obs <- testStat(BCcounts,group)
obs
obs
mean(Bdata$count)-mean(Cdata$count)
sample
sample(group)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms>obs)
mean(perms>obs)
testStat(DEcounts,group)
testStat(DEcounts,group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
load("swirl")
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child ~ parent)
x
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
x
ols.ic <- fit$coef[1]
x
ols.slope <- fit$coef[2]
x
lhs-rhs
lhs-rhs
all.equal(lhs,rhs)
x
varChild <- var(galton$child)
varRes
x
varRes <- var(fit$residuals)
a
x
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varEst)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit)
mean(efit$residuals)
x
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor
cor(gpa_nor,gch_nor)
x
l_nor <- lm(gch_nor ~ gpa_nor)
library(swirl)
swirl()
fit
x
fit <- lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mean(x)
mu <- mean(galton$child)
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
x
sRes <- deviance(fit)
sRes <- deviance(fit)
1-sRes/sTot
1-sRes/sTot
summary(fit)$r.squared
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
x
ones <- rep(1, nrow(galton))
ones <- rep(1, nrow(galton))
swirl()
x
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
view(trees2)
head(tress2)
head(trees2)
1
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
swiss
all <- lm(Fertility ~ ., swiss)
all
summary(all)
skip()
cor
cor(swiss$Examination,swiss$Education)
skip()
skip()
skip()
skip()
skip()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("e1071")
install.packages("randomForest")
library(plotly)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
knitr::opts_chunk$set(echo = FALSE)
colnames(USArrests)
getwd()
setwd("R")
setwd("shin")
setwd("ABC")
runApp("ui.R")
update.packages(ask = FALSE, checkBuilt = TRUE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("devtools")
install_github
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidify', 'ramnathv')
install.packages("rtools")
install_github('slidify', 'ramnathv')
library(devtools)
library(sourcetools)
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
getwd()
author("slidify_deck")
library(slidify)
install_github('ramnathv/slidify')
install_github('ramnathv/slidify')
install_github('ramnathv/slidify',ref='dev')
# Chunk 1
shinyUI(fluidPage(
# Application title
titlePanel("Covid Deaths by Country"),
# Sidebar with a slider input for number of deaths
sidebarLayout(
sidebarPanel(
sliderInput("deaths",
"Number of deaths:",
min = 0,
max = 650000,
value = c(20000,50000)),
h5("Help: The chart on the right will show one bar per country with the total covid 19 deaths up to July 31th, 2021. Use the slider to filter the countries with the number of deaths you are interested in. If there are too many bars, country names may not fit the plot. Source code: https://github.com/juancho182/shiny")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
# Chunk 2
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate data based on slider input
x    <- read.csv("coviddata2.csv",sep=",",header = TRUE)
min  <- input$deaths[1]
max  <- input$deaths[2]
x    <- subset(x, Deaths>=min & Deaths<=max)
# draw the barplot with the selected data
barplot(x[,2],
ylab="Country",
xlab="Deaths",
horiz=TRUE,
names.arg=x[,1])
})
})
install.packages(c("digest", "haven", "rmarkdown", "rsconnect", "tinytex", "utf8", "vroom", "xfun"))
# Chunk 1
shinyUI(fluidPage(
# Application title
titlePanel("Covid Deaths by Country"),
# Sidebar with a slider input for number of deaths
sidebarLayout(
sidebarPanel(
sliderInput("deaths",
"Number of deaths:",
min = 0,
max = 650000,
value = c(20000,50000)),
h5("Help: The chart on the right will show one bar per country with the total covid 19 deaths up to July 31th, 2021. Use the slider to filter the countries with the number of deaths you are interested in. If there are too many bars, country names may not fit the plot. Source code: https://github.com/juancho182/shiny")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
# Chunk 2
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate data based on slider input
x    <- read.csv("coviddata2.csv",sep=",",header = TRUE)
min  <- input$deaths[1]
max  <- input$deaths[2]
x    <- subset(x, Deaths>=min & Deaths<=max)
# draw the barplot with the selected data
barplot(x[,2],
ylab="Country",
xlab="Deaths",
horiz=TRUE,
names.arg=x[,1])
})
})
# Chunk 1
shinyUI(fluidPage(
# Application title
titlePanel("Covid Deaths by Country"),
# Sidebar with a slider input for number of deaths
sidebarLayout(
sidebarPanel(
sliderInput("deaths",
"Number of deaths:",
min = 0,
max = 650000,
value = c(20000,50000)),
h5("Help: The chart on the right will show one bar per country with the total covid 19 deaths up to July 31th, 2021. Use the slider to filter the countries with the number of deaths you are interested in. If there are too many bars, country names may not fit the plot. Source code: https://github.com/juancho182/shiny")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
# Chunk 2
library(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate data based on slider input
x    <- read.csv("coviddata2.csv",sep=",",header = TRUE)
min  <- input$deaths[1]
max  <- input$deaths[2]
x    <- subset(x, Deaths>=min & Deaths<=max)
# draw the barplot with the selected data
barplot(x[,2],
ylab="Country",
xlab="Deaths",
horiz=TRUE,
names.arg=x[,1])
})
})
# Chunk 1
library(shiny)
shinyUI(fluidPage(
# Application title
titlePanel("Covid Deaths by Country"),
# Sidebar with a slider input for number of deaths
sidebarLayout(
sidebarPanel(
sliderInput("deaths",
"Number of deaths:",
min = 0,
max = 650000,
value = c(20000,50000)),
h5("Help: The chart on the right will show one bar per country with the total covid 19 deaths up to July 31th, 2021. Use the slider to filter the countries with the number of deaths you are interested in. If there are too many bars, country names may not fit the plot. Source code: https://github.com/juancho182/shiny")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
# Chunk 2
library(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate data based on slider input
x    <- read.csv("coviddata2.csv",sep=",",header = TRUE)
min  <- input$deaths[1]
max  <- input$deaths[2]
x    <- subset(x, Deaths>=min & Deaths<=max)
# draw the barplot with the selected data
barplot(x[,2],
ylab="Country",
xlab="Deaths",
horiz=TRUE,
names.arg=x[,1])
})
})
